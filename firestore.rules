rules_version = '2';
service cloud.firestore {
  // Rate limiting configuration (10 writes per minute per user)
  function rateLimit() {
    return !exists(/databases/$(database)/documents/$(resource.__name__)) || 
           !('lastWrite' in resource.data) ||
           request.time > resource.data.lastWrite + duration.value(1, 's');
  }
  
  // Email validation function
  function isValidEmail(email) {
    return email.matches('^[^@]+@[^@]+\\.[^@]+$');
  }
  
  // Phone number validation
  function isValidPhone(phone) {
    return phone.matches('^[0-9]{10,15}$');
  }
  
  // Price validation (must be positive number with 2 decimal places)
  function isValidPrice(price) {
    return price is number && 
           price > 0 && 
           price == int(price * 100) / 100.0;
  }
  
  // Stock validation (must be non-negative integer)
  function isValidStock(stock) {
    return stock is int && stock >= 0;
  }
  
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isApprovedUser() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true;
    }

    // Users collection
    match /users/{userId} {
      // Helper function to check if the update is an approval
      function isApprovalUpdate() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isApproved', 'approvedBy', 'approvedAt']);
      }
      
      // User data validation
      function isValidUserData() {
        let userData = request.resource.data;
        return userData.keys().hasAll(['email', 'displayName', 'role']) &&
               isValidEmail(userData.email) &&
               userData.displayName is string &&
               userData.displayName.size() >= 2 &&
               userData.displayName.size() <= 50 &&
               userData.role in ['buyer', 'msme', 'admin'] &&
               (userData.phone == null || isValidPhone(userData.phone));
      }

      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        isAdmin() ||
        // Allow buyers to read all users (needed for product filtering)
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'buyer'
      );
      
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        isValidUserData() &&
        rateLimit();
        
      allow update: if request.auth != null && (
        // Users can update their own document with validation
        (request.auth.uid == userId && 
         isValidUserData() && 
         rateLimit()) ||
        // Admins can approve any non-admin user
        (isAdmin() && (
          isApprovalUpdate() ||
          (
            // For other updates, admin can't modify other admin users
            !exists(/databases/$(database)/documents/users/$(userId)) ||
            get(/databases/$(database)/documents/users/$(userId)).data.role != 'admin' ||
            userId == request.auth.uid
          )
        ))
      );
    }
    
    // Inventory collection - authenticated users can read, MSMEs can write their own items
    match /inventory/{itemId} {
      // Inventory validation
      function isValidInventory() {
        let inventory = request.resource.data;
        return inventory.keys().hasAll(['name', 'category', 'stock', 'price', 'unitOfMeasure', 'minStockLevel', 'msmeId']) &&
               inventory.name is string && inventory.name.size() >= 2 && inventory.name.size() <= 100 &&
               inventory.category is string && inventory.category.size() >= 2 && inventory.category.size() <= 50 &&
               isValidStock(inventory.stock) &&
               isValidPrice(inventory.price) &&
               inventory.unitOfMeasure is string && inventory.unitOfMeasure.size() >= 1 && inventory.unitOfMeasure.size() <= 20 &&
               isValidStock(inventory.minStockLevel) &&
               inventory.msmeId is string && inventory.msmeId != '';
      }
      
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'msme' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true &&
        request.resource.data.msmeId == request.auth.uid &&
        isValidInventory();
        
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'msme' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true &&
        resource.data.msmeId == request.auth.uid &&
        isValidInventory();
        
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'msme' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true &&
        resource.data.msmeId == request.auth.uid;
      
      // Allow buyers to update stock when placing orders (stock reduction only)
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'buyer' &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock']) &&
        request.resource.data.stock is int &&
        request.resource.data.stock >= 0 &&
        request.resource.data.stock < resource.data.stock &&
        rateLimit();
    }
    
    // Products collection - MSME users can manage their own products, others can read
    match /products/{productId} {
      // Product data validation
      function isValidProduct() {
        let product = request.resource.data;
        return product.keys().hasAll(['name', 'description', 'price', 'stock', 'initialStock', 'msmeId']) &&
               product.name is string && product.name.size() >= 3 && product.name.size() <= 100 &&
               product.description is string && product.description.size() <= 1000 &&
               isValidPrice(product.price) &&
               isValidStock(product.stock) &&
               isValidStock(product.initialStock) &&
               product.stock <= product.initialStock &&
               product.msmeId is string && product.msmeId != '';
      }
      
      // Allow all authenticated users to read products
      allow read: if request.auth != null;
      
      // Allow MSME users to create products with their own msmeId
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'msme' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true &&
        request.resource.data.msmeId == request.auth.uid &&
        isValidProduct() &&
        rateLimit();
      
      // Allow MSME users to update/delete only their own products
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'msme' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true &&
        resource.data.msmeId == request.auth.uid &&
        isValidProduct() &&
        rateLimit();
      
      // Allow buyers to update product stock when placing orders (stock reduction only)
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'buyer' &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock', 'updatedAt']) &&
        request.resource.data.stock is int &&
        request.resource.data.stock >= 0 &&
        request.resource.data.stock < resource.data.stock;
      
      // Allow admins to read/write all products with validation
      allow read, write: if isAdmin() && (request.method == 'get' || isValidProduct()) && rateLimit();
    }
    
    // Orders collection - buyers can read/write their own orders, MSMEs can read orders for their products
    match /orders/{orderId} {
      // Order validation - simplified for debugging
      function isValidOrder() {
        let order = request.resource.data;
        return order.keys().hasAll(['buyerId', 'items', 'status', 'total', 'date']) &&
               order.buyerId is string && order.buyerId != '' &&
               order.items is list && order.items.size() > 0 &&
               order.status in ['Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'] &&
               order.total is number && order.total > 0 &&
               order.date is string;
      }
      
      
      allow read: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['msme', 'admin']));
      
      allow create: if request.auth != null && 
        request.resource.data.buyerId == request.auth.uid &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'buyer' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true &&
        isValidOrder();
      
      allow update: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['msme', 'admin'])) &&
        isValidOrder() &&
        rateLimit();
      
      allow delete: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
    }
    
    // Audit logs - only admins can read/write
    match /auditLogs/{logId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
